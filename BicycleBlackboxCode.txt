#include "I2Cdev.h"
#include "MPU6050.h"
#include "SD.h"

File myFile;
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
#include "Wire.h"
#endif

MPU6050 accelgyro;


int16_t ax, ay, az;
int16_t gx, gy, gz;


#define OUTPUT_READABLE_ACCELGYRO


#define LED_PIN 13
bool blinkState = false;

#include "LedControl.h"

LedControl lc=LedControl(12,11,10);  // Pins: DIN,CLK,CS, # of Display connected

unsigned long delayTime=200;  // Delay between Frames

// Put values in arrays
byte invader1a[] =
{
   B00011000,  // First frame of invader #1
   B00111100,
   B01111110,
   B11011011,
   B11111111,
   B00100100,
   B01011010,
   B10100101
};

byte invader1b[] =
{
  B00011000, // Second frame of invader #1
  B00111100,
  B01111110,
  B11011011,
  B11111111,
  B00100100,
  B01011010,
  B01000010
};

byte invader2a[] =
{
0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81
};

byte invader2b[] =
{
0x7e,0xbd,0xdb,0xe7,0xe7,0xdb,0xbd,0x7e
};

void setup() {
  lc.shutdown(0,false);  // Wake up displays
  lc.shutdown(1,false);
  lc.setIntensity(0,5);  // Set intensity levels
  lc.setIntensity(1,5);
  lc.clearDisplay(0);  // Clear Displays
  lc.clearDisplay(1);

  void sinvader1a()
{
  for (int i = 0; i < 8; i++)  
  {
    lc.setRow(0,i,invader2a[i]);
  }
}

void sinvader1b()
{
  for (int i = 0; i < 8; i++)
  {
    lc.setRow(0,i,invader2b[i]);
  }
}
  
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif
    Serial.begin(38400);

    // initialize device
    Serial.println("Initializing I2C devices...");
    accelgyro.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
Serial.begin(9600);
  while (!Serial) {
    ; 
  }


  Serial.print("Initializing SD card...");

  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");

 
  myFile = SD.open("test.txt", FILE_WRITE);

 
  if (myFile) {
    Serial.print("Writing to test.txt...");
    if((ax && ay)>1000){
    myFile.println("THERE IS A CRASH");
    myFile.println(ax && ay);
    }
    // close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }

  // re-open the file for reading:
  myFile = SD.open("test.txt");
  if (myFile) {
    Serial.println("test.txt:");

    // read from the file until there's nothing else in it:
    while (myFile.available()) {
      Serial.write(myFile.read());
    }
    // close the file:
    myFile.close();
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }
}



void loop() {

    sinvader1a();
    delay(delayTime);

    sinvader1b();
    delay(delayTime);

    
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);


    #ifdef OUTPUT_READABLE_ACCELGYRO
       
        Serial.print("a/g:\t");
        Serial.print("accelx: "); Serial.print("\t");
        Serial.print(ax); Serial.print("\t");
        Serial.print("accely: "); Serial.print("\t");
        Serial.print(ay); Serial.print("\t");
        Serial.print("accelz: "); Serial.print("\t");
        Serial.print(az); Serial.print("\t");
        Serial.print("gyrox: "); Serial.print("\t");
        Serial.print(gx); Serial.print("\t");
        Serial.print("gyroy: "); Serial.print("\t");
        Serial.print(gy); Serial.print("\t");
        Serial.print("gyroz: "); Serial.print("\t");
        Serial.println(gz);
        delay(2000);
    #endif

    #ifdef OUTPUT_BINARY_ACCELGYRO
        Serial.write((uint8_t)(ax >> 8)); Serial.write((uint8_t)(ax & 0xFF));
        Serial.write((uint8_t)(ay >> 8)); Serial.write((uint8_t)(ay & 0xFF));
        Serial.write((uint8_t)(az >> 8)); Serial.write((uint8_t)(az & 0xFF));
        Serial.write((uint8_t)(gx >> 8)); Serial.write((uint8_t)(gx & 0xFF));
        Serial.write((uint8_t)(gy >> 8)); Serial.write((uint8_t)(gy & 0xFF));
        Serial.write((uint8_t)(gz >> 8)); Serial.write((uint8_t)(gz & 0xFF));
    #endif


}